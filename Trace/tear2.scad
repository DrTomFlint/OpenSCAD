module tear2_1()
{
 /* Generated by trace2scad version 20150415
    http://aggregate.org/MAKE/TRACE2SCAD/
    Optimized model has 359/680 original points
 */
 color([0.5, 0.5, 0.5])
 assign(minx=0) /* polygon minx=0 */
 assign(miny=0) /* polygon miny=0 */
 assign(maxx=20000) /* polygon maxx=20000 */
 assign(maxy=16130) /* polygon maxy=16130 */
 assign(dx=maxx-minx)
 assign(dy=maxy-miny)
 assign(maxd=((dx>dy)?dx:dy))
 scale([1/maxd, 1/maxd, 1])
 translate([-minx-dx/2, -miny-dy/2, 0])
 linear_extrude(height=1, convexity=359)
 union() {
  union() {
   union() {
    difference() {
     polygon([[0,8065],[0,0],[9679,0],[9693,22],[9705,0],[20000,0],[20000,8270],[19748,8268],[19743,7458],[19728,7458],[19725,8262],[19717,8270],[19228,8270],[19220,8262],[19218,7458],[19203,7458],[19198,8268],[18698,8268],[18693,7458],[18678,7458],[18675,8262],[18667,8270],[18178,8270],[18170,8262],[18168,7458],[18153,7458],[18148,8268],[17648,8268],[17643,7458],[17628,7458],[17625,8262],[17616,8271],[17519,8269],[17483,8281],[17508,8295],[20000,8295],[20000,16130],[9705,16130],[9705,13597],[9678,13555],[9622,13555],[9612,13565],[8008,13568],[8008,13583],[9678,13588],[9678,14088],[8848,14093],[8844,14110],[9675,14110],[9683,14124],[9678,14633],[8848,14638],[8848,14658],[9678,14663],[9678,15158],[8853,15160],[8840,15171],[8851,15185],[9672,15185],[9680,15193],[9678,15683],[8848,15688],[8848,15708],[9678,15713],[9680,16130],[0,16130]], convexity=33);
     polygon([[10748,13995],[10748,13988],[9923,13985],[9914,13994],[9921,14005],[10748,14003]], convexity=7);
     polygon([[10352,13792],[10360,13789],[10360,13779],[10345,13764],[10288,13771],[9918,13773],[9912,13653],[9901,13634],[9890,13666],[9890,13783],[9902,13795],[10344,13795]], convexity=8);
     polygon([[8064,8297],[8075,8289],[8075,8279],[8058,8265],[8007,8265],[7996,8283],[8008,8299],[8033,8304],[8053,8305]], convexity=6);
     polygon([[8189,8296],[8200,8286],[8200,8279],[8186,8265],[8133,8265],[8115,8279],[8115,8286],[8137,8305],[8178,8305]], convexity=6);
     polygon([[8320,8292],[8332,8280],[8313,8265],[8259,8265],[8245,8279],[8245,8286],[8267,8305],[8308,8305]], convexity=6);
     polygon([[8445,8293],[8451,8281],[8436,8265],[8389,8265],[8370,8275],[8370,8287],[8387,8305],[8438,8305]], convexity=6);
     polygon([[8569,8296],[8580,8286],[8580,8279],[8566,8265],[8509,8265],[8495,8279],[8495,8286],[8517,8305],[8558,8305]], convexity=6);
     polygon([[8696,8297],[8705,8288],[8705,8279],[8688,8265],[8639,8265],[8624,8281],[8637,8305],[8687,8305]], convexity=6);
     polygon([[8805,8296],[8817,8292],[8821,8276],[8783,8265],[8767,8265],[8744,8281],[8762,8300],[8793,8299]], convexity=7);
     polygon([[98,8287],[101,8279],[88,8270],[51,8270],[40,8283],[52,8295],[95,8295]], convexity=6);
     polygon([[349,8288],[355,8282],[343,8270],[301,8270],[290,8283],[302,8295],[344,8295]], convexity=6);
     polygon([[729,8288],[735,8282],[723,8270],[681,8270],[670,8283],[682,8295],[724,8295]], convexity=6);
     polygon([[979,8288],[985,8282],[973,8270],[931,8270],[920,8283],[932,8295],[974,8295]], convexity=6);
     polygon([[1359,8288],[1365,8282],[1353,8270],[1311,8270],[1300,8283],[1312,8295],[1354,8295]], convexity=6);
     polygon([[1609,8288],[1615,8282],[1603,8270],[1561,8270],[1550,8283],[1562,8295],[1604,8295]], convexity=6);
     polygon([[1787,8222],[1795,8214],[1795,8205],[1774,8163],[1760,8182],[1760,8211],[1770,8230],[1779,8230]], convexity=6);
     polygon([[1785,8073],[1785,8051],[1772,8040],[1760,8052],[1760,8093],[1772,8105],[1785,8094]], convexity=7);
     polygon([[1238,8072],[1238,8048],[1218,8048],[1214,8086],[1220,8101],[1238,8097]], convexity=6);
     polygon([[1785,7823],[1785,7801],[1772,7790],[1760,7802],[1760,7843],[1772,7855],[1785,7844]], convexity=7);
     polygon([[1782,7717],[1785,7709],[1785,7681],[1779,7665],[1766,7665],[1760,7681],[1760,7713],[1772,7725],[1779,7725]], convexity=6);
     polygon([[9637,3022],[9640,3014],[9629,3000],[9596,3000],[9580,3006],[9580,3018],[9623,3029],[9634,3030]], convexity=6);
     polygon([[9702,2907],[9705,2899],[9705,2868],[9696,2853],[9680,2866],[9680,2899],[9686,2915],[9699,2915]], convexity=6);
     polygon([[9705,2633],[9705,2611],[9692,2600],[9680,2612],[9680,2653],[9692,2665],[9705,2654]], convexity=7);
     polygon([[10750,2587],[10744,2580],[9918,2583],[9918,2598],[10738,2603],[10756,2594]], convexity=6);
     polygon([[9705,2383],[9705,2361],[9692,2350],[9680,2362],[9680,2403],[9692,2415],[9705,2404]], convexity=7);
     polygon([[9702,2277],[9705,2269],[9705,2238],[9696,2223],[9680,2236],[9680,2269],[9686,2285],[9699,2285]], convexity=6);
     polygon([[9705,2003],[9705,1981],[9692,1970],[9680,1982],[9680,2023],[9692,2035],[9705,2024]], convexity=7);
     polygon([[10767,1947],[10775,1944],[10775,1542],[10742,1510],[9918,1513],[9918,1528],[10742,1530],[10755,1541],[10755,1913],[10743,1930],[9918,1928],[9915,1543],[9904,1530],[9890,1541],[9890,1931],[9900,1950],[10759,1950]], convexity=10);
     polygon([[9705,1753],[9705,1731],[9692,1720],[9680,1732],[9680,1773],[9692,1785],[9705,1774]], convexity=7);
     polygon([[9702,1647],[9705,1639],[9705,1611],[9699,1595],[9686,1595],[9680,1611],[9680,1643],[9692,1655],[9699,1655]], convexity=6);
     polygon([[9705,1373],[9705,1351],[9692,1340],[9680,1352],[9680,1393],[9692,1405],[9705,1394]], convexity=7);
     polygon([[9705,1123],[9705,1101],[9692,1090],[9680,1102],[9680,1143],[9692,1155],[9705,1144]], convexity=7);
     polygon([[9702,1017],[9705,1009],[9705,981],[9699,965],[9686,965],[9680,981],[9680,1013],[9692,1025],[9699,1025]], convexity=6);
     polygon([[9705,743],[9705,721],[9692,710],[9680,722],[9680,763],[9692,775],[9705,764]], convexity=7);
     polygon([[9705,493],[9705,471],[9692,460],[9680,472],[9680,513],[9692,525],[9705,514]], convexity=7);
     polygon([[9702,387],[9705,379],[9705,351],[9699,335],[9686,335],[9680,351],[9680,383],[9692,395],[9699,395]], convexity=6);
     polygon([[9705,113],[9705,91],[9692,80],[9680,92],[9680,133],[9692,145],[9705,134]], convexity=7);
    }
   }
  }
 }
}

module tear2()
{
 /* all layers combined, scaled to within a 1mm cube */
 scale([1, 1, 1/1])
 difference() {
  union() {
   scale([1,1,2]) translate([0,0,-0.5]) tear2_1();
  }
  translate([0,0,-2]) cube([2,2,4],center=true);
 }
}
tear2();
